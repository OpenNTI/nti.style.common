// @mixin blur-effect() {
// 	//filter: blur(add = 0, direction = 0, strength = 10);//IE
// 	//filter: url(#blur-effect);//moz
// 	filter: blur(8px);
// }

// We use this to do clear floats

@import "./responsive.scss";

@mixin clearfix {
	&::before, &::after {
		clear: both;
		content: " ";
		display: table;
		margin: 0;
		overflow: hidden;
		padding: 0;
		position: relative;
	}
}

@mixin fill {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}

@mixin vertical-align {
	position: relative;
	top: 50%;
	transform: translate3d(0, -50%, 0);
}

@mixin hardware-render {
	backface-visibility: hidden;
	transform: translate3d(0, 0, 0);
}

@mixin touch-scroll {
	backface-visibility: hidden;
	-webkit-overflow-scrolling: touch;
	-ms-overflow-style: -ms-autohiding-scrollbar;
}

$break-minimum: 360px !default;
$break-handheld: 800px !default;
$break-small: 900px !default;
$break-large: 1200px !default;
$break-wide: 1600px !default;
$break-short: 600px !default;

@mixin respond-to($media) {
	@if $media == smallest-handhelds {
		@media only screen and (max-width: $break-minimum) { @content; }
	}

	@if $media == handhelds {
		@media only screen and (max-width: $break-handheld) { @content; }
	}

	@else if $media == small-screens {
		@media only screen and (max-width: $break-small) { @content; }
	}

	@else if $media == medium-screens {
		@media only screen and (min-width: $break-small + 1) and (max-width: $break-large - 1) { @content; }
	}

	@else if $media == wide-screens {
		@media only screen and (min-width: $break-large)  and (max-width: $break-wide) { @content; }
	}

	@else if $media == ultra-wide-screens {
		@media only screen and (min-width: $break-wide + 1) { @content; }
	}

	@else if $media == up-to-medium-screens {
		@media only screen and (max-width: $break-large) { @content; }
	}

	@else if $media == up-to-wide-screens {
		@media only screen and (max-width: $break-wide) { @content; }
	}

	@else if $media == down-to-handhelds {
		@media only screen and (min-width: $break-handheld + 1) { @content; }
	}

	@else if $media == short-screens {
		@media only screen and (max-height: $break-short) { @content; }
	}
}

@mixin viewportWidth($rule, $value) {
	$w: $value;

	#{$rule}: #{$w}vw;
}

@mixin viewportHeight($rule, $value) {
	$h: $value;

	#{$rule}: #{$h}vh;
  	height: calc(var(--vh, 1vh) * $h);
}

//TODO: this seems like a component style
@mixin metadata() {
	background: rgba(0, 0, 0, 0.2);
	border-radius: 2px;
	color: white;
}

//TODO: this seems like a component style
@mixin count-badge() {
	@include metadata();

	padding: 0.2em 0.5em;
	margin-left: 0.25em;
	display: inline-block;
	font-family: $body-font-family;
	font-weight: bold;
	margin-right: -0.25em;
}

@mixin limit-lines ($lines: 2, $line-height: 1.15) {
	max-height: $lines * ($line-height * 1em);
	overflow: hidden;
	text-overflow: ellipsis;

	// Why do we need a block? autoprefixer will strip "-webkit-box-orient" and break the line-clamp, now that no
	// supported browsers use the old flexbox rules. However, this line-clamp trick still needs that rule...so we
	// aim to disable autoprefixer in the smallest block allowed. (if we just disable autoprefixer at the mixin-
	// level, the block mixed-in would have autoprefixer disabled too... which would be bad)
	// Point 2: We would use @supports() instead of @media, but Safari <=8 do not support that, while they do
	// support the rules in the block, so we use an @rule that will result in a block.
	// @supports (display: -webkit-box) {
	@media screen {
		//Magic non-standard CSS:

		/* autoprefixer: off */
		display: -webkit-box;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: $lines;
	}
}

@mixin covered-modal () {
	body > .modal[aria-hidden="true"] & {
		@content;
	}
}

@mixin opacity-on-covered-modal () {
	transition: opacity 0.5s;
	opacity: 1;

	@include covered-modal () {
		opacity: 0.05;
	}
}

@mixin wide-screen () {
	padding-top: 56.25%;
}

@mixin wide-screen-video () {
	@include wide-screen;

	position: relative;
	overflow: hidden;

	iframe {
		height: 100%;
	}
	video, iframe {
		position: absolute;
		top: 0;
		left: 0;
		max-width: 100%;
		width: 100%;
	}
}
